{
  "address": "0xAA4e13c38ACc5652dcde7affA8745D5c2e2f5eab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "winnerName_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x66cc3f888531aa0151c48ddf43d2a029306ff9fa7b97631d6614577f742a121e",
  "receipt": {
    "to": null,
    "from": "0x0De11B6F33b3d0813004C99b3fF7Ff73c1e1F7a3",
    "contractAddress": "0xAA4e13c38ACc5652dcde7affA8745D5c2e2f5eab",
    "transactionIndex": 3,
    "gasUsed": "1097547",
    "logsBloom": "0x
    "blockHash": "0x9fdb00437b69158a5768065b8de9f3d8971c5505dde996caa22d70acd6381884",
    "transactionHash": "0x66cc3f888531aa0151c48ddf43d2a029306ff9fa7b97631d6614577f742a121e",
    "logs": [],
    "blockNumber": 7193382,
    "cumulativeGasUsed": "1436095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x70726f706f73616c2d3100000000000000000000000000000000000000000000",
      "0x70726f706f73616c2d3200000000000000000000000000000000000000000000",
      "0x70726f706f73616c2d3300000000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "8d482bba44c06101a2be4f4eeb948ba0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"winningProposal()\":{\"details\":\"Computes the winning proposal taking all previous votes into account.\"}},\"title\":\"Voting with delegation.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new ballot to choose one of `proposalNames`.\"},\"delegate(address)\":{\"notice\":\"Delegate your vote to the voter `to`.\"},\"vote(uint256)\":{\"notice\":\"Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ballot.sol\":\"Ballot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Voting with delegation.\\ncontract Ballot {\\n    // This declares a new complex type which will\\n    // be used for variables later.\\n    // It will represent a single voter.\\n    struct Voter {\\n        uint256 weight; // weight is accumulated by delegation\\n        bool voted; // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint256 vote; // index of the voted proposal\\n    }\\n\\n    // This is a type for a single proposal.\\n    struct Proposal {\\n        bytes32 name; // short name (up to 32 bytes)\\n        uint256 voteCount; // number of accumulated votes\\n    }\\n\\n    address public chairperson;\\n\\n    // This declares a state variable that\\n    // stores a `Voter` struct for each possible address.\\n    mapping(address => Voter) public voters;\\n\\n    // A dynamically-sized array of `Proposal` structs.\\n    Proposal[] public proposals;\\n\\n    /// Create a new ballot to choose one of `proposalNames`.\\n    constructor(bytes32[] memory proposalNames) {\\n        chairperson = msg.sender;\\n        voters[chairperson].weight = 1;\\n\\n        // For each of the provided proposal names,\\n        // create a new proposal object and add it\\n        // to the end of the array.\\n        for (uint256 i = 0; i < proposalNames.length; i++) {\\n            // `Proposal({...})` creates a temporary\\n            // Proposal object and `proposals.push(...)`\\n            // appends it to the end of `proposals`.\\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\\n        }\\n    }\\n\\n    // Give `voter` the right to vote on this ballot.\\n    // May only be called by `chairperson`.\\n    function giveRightToVote(address voter) external {\\n        // If the first argument of `require` evaluates\\n        // to `false`, execution terminates and all\\n        // changes to the state and to Ether balances\\n        // are reverted.\\n        // This used to consume all gas in old EVM versions, but\\n        // not anymore.\\n        // It is often a good idea to use `require` to check if\\n        // functions are called correctly.\\n        // As a second argument, you can also provide an\\n        // explanation about what went wrong.\\n        require(\\n            msg.sender == chairperson,\\n            \\\"Only chairperson can give right to vote.\\\"\\n        );\\n        require(!voters[voter].voted, \\\"The voter already voted.\\\");\\n        require(voters[voter].weight == 0);\\n        voters[voter].weight = 1;\\n    }\\n\\n    /// Delegate your vote to the voter `to`.\\n    function delegate(address to) external {\\n        // assigns reference\\n        Voter storage sender = voters[msg.sender];\\n        require(!sender.voted, \\\"You already voted.\\\");\\n\\n        require(to != msg.sender, \\\"Self-delegation is disallowed.\\\");\\n\\n        // Forward the delegation as long as\\n        // `to` also delegated.\\n        // In general, such loops are very dangerous,\\n        // because if they run too long, they might\\n        // need more gas than is available in a block.\\n        // In this case, the delegation will not be executed,\\n        // but in other situations, such loops might\\n        // cause a contract to get \\\"stuck\\\" completely.\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\n        }\\n\\n        // Since `sender` is a reference, this\\n        // modifies `voters[msg.sender].voted`\\n        Voter storage delegate_ = voters[to];\\n\\n        // Voters cannot delegate to wallets that cannot vote.\\n        require(delegate_.weight >= 1);\\n        sender.voted = true;\\n        sender.delegate = to;\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            proposals[delegate_.vote].voteCount += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n        }\\n    }\\n\\n    /// Give your vote (including votes delegated to you)\\n    /// to proposal `proposals[proposal].name`.\\n    function vote(uint256 proposal) external {\\n        Voter storage sender = voters[msg.sender];\\n        require(sender.weight != 0, \\\"Has no right to vote\\\");\\n        require(!sender.voted, \\\"Already voted.\\\");\\n        sender.voted = true;\\n        sender.vote = proposal;\\n\\n        // If `proposal` is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        proposals[proposal].voteCount += sender.weight;\\n    }\\n\\n    /// @dev Computes the winning proposal taking all\\n    /// previous votes into account.\\n    function winningProposal() public view returns (uint256 winningProposal_) {\\n        uint256 winningVoteCount = 0;\\n        for (uint256 p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    // Calls winningProposal() function to get the index\\n    // of the winner contained in the proposals array and then\\n    // returns the name of the winner\\n    function winnerName() external view returns (bytes32 winnerName_) {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n}\\n\",\"keccak256\":\"0xc77e39641f3735228b0622c991a754f6041b2fabd38805de8fb92d1ce5133cba\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200147238038062001472833981810160405281019062000037919062000342565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200017657600260405180604001604052808484815181106200010f576200010e62000393565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200016d90620003fb565b915050620000e2565b505062000448565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001e28262000197565b810181811067ffffffffffffffff82111715620002045762000203620001a8565b5b80604052505050565b6000620002196200017e565b9050620002278282620001d7565b919050565b600067ffffffffffffffff8211156200024a5762000249620001a8565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620002758162000260565b81146200028157600080fd5b50565b60008151905062000295816200026a565b92915050565b6000620002b2620002ac846200022c565b6200020d565b90508083825260208201905060208402830185811115620002d857620002d76200025b565b5b835b81811015620003055780620002f0888262000284565b845260208401935050602081019050620002da565b5050509392505050565b600082601f83011262000327576200032662000192565b5b8151620003398482602086016200029b565b91505092915050565b6000602082840312156200035b576200035a62000188565b5b600082015167ffffffffffffffff8111156200037c576200037b6200018d565b5b6200038a848285016200030f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200040882620003f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200043d576200043c620003c2565b5b600182019050919050565b61101a80620004586000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd146101145780639e7b8d6114610132578063a3ec138d1461014e578063e2ba53f01461018157610088565b80630121b93f1461008d578063013cf08b146100a95780632e4176cf146100da5780635c19a95c146100f8575b600080fd5b6100a760048036038101906100a291906109f4565b61019f565b005b6100c360048036038101906100be91906109f4565b6102e5565b6040516100d1929190610a49565b60405180910390f35b6100e2610319565b6040516100ef9190610ab3565b60405180910390f35b610112600480360381019061010d9190610afa565b61033d565b005b61011c6106e9565b6040516101299190610b27565b60405180910390f35b61014c60048036038101906101479190610afa565b610771565b005b61016860048036038101906101639190610afa565b610928565b6040516101789493929190610b5d565b60405180910390f35b610189610985565b6040516101969190610ba2565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610c1a565b60405180910390fd5b8060010160009054906101000a900460ff161561027b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027290610c86565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508181600201819055508060000154600283815481106102ba576102b9610ca6565b5b906000526020600020906002020160010160008282546102da9190610d04565b925050819055505050565b600281815481106102f557600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990610da6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043790610e12565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105af57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a190610e7e565b60405180910390fd5b610441565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561060457600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff16156106c4578160000154600282600201548154811061069857610697610ca6565b5b906000526020600020906002020160010160008282546106b89190610d04565b925050819055506106e4565b81600001548160000160008282546106dc9190610d04565b925050819055505b505050565b6000806000905060005b60028054905081101561076c57816002828154811061071557610714610ca6565b5b9060005260206000209060020201600101541115610759576002818154811061074157610740610ca6565b5b90600052602060002090600202016001015491508092505b808061076490610e9e565b9150506106f3565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690610f58565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff161561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690610fc4565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146108de57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b600060026109916106e9565b815481106109a2576109a1610ca6565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b6109d1816109be565b81146109dc57600080fd5b50565b6000813590506109ee816109c8565b92915050565b600060208284031215610a0a57610a096109b9565b5b6000610a18848285016109df565b91505092915050565b6000819050919050565b610a3481610a21565b82525050565b610a43816109be565b82525050565b6000604082019050610a5e6000830185610a2b565b610a6b6020830184610a3a565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9d82610a72565b9050919050565b610aad81610a92565b82525050565b6000602082019050610ac86000830184610aa4565b92915050565b610ad781610a92565b8114610ae257600080fd5b50565b600081359050610af481610ace565b92915050565b600060208284031215610b1057610b0f6109b9565b5b6000610b1e84828501610ae5565b91505092915050565b6000602082019050610b3c6000830184610a3a565b92915050565b60008115159050919050565b610b5781610b42565b82525050565b6000608082019050610b726000830187610a3a565b610b7f6020830186610b4e565b610b8c6040830185610aa4565b610b996060830184610a3a565b95945050505050565b6000602082019050610bb76000830184610a2b565b92915050565b600082825260208201905092915050565b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b6000610c04601483610bbd565b9150610c0f82610bce565b602082019050919050565b60006020820190508181036000830152610c3381610bf7565b9050919050565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b6000610c70600e83610bbd565b9150610c7b82610c3a565b602082019050919050565b60006020820190508181036000830152610c9f81610c63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0f826109be565b9150610d1a836109be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4f57610d4e610cd5565b5b828201905092915050565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b6000610d90601283610bbd565b9150610d9b82610d5a565b602082019050919050565b60006020820190508181036000830152610dbf81610d83565b9050919050565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b6000610dfc601e83610bbd565b9150610e0782610dc6565b602082019050919050565b60006020820190508181036000830152610e2b81610def565b9050919050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610e68601983610bbd565b9150610e7382610e32565b602082019050919050565b60006020820190508181036000830152610e9781610e5b565b9050919050565b6000610ea9826109be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610edb57610eda610cd5565b5b600182019050919050565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b6000610f42602883610bbd565b9150610f4d82610ee6565b604082019050919050565b60006020820190508181036000830152610f7181610f35565b9050919050565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b6000610fae601883610bbd565b9150610fb982610f78565b602082019050919050565b60006020820190508181036000830152610fdd81610fa1565b905091905056fea2646970667358221220d010016fa6278aff0a8e3393f22f78add8f33a03373280bb2a7a685574eed94764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd146101145780639e7b8d6114610132578063a3ec138d1461014e578063e2ba53f01461018157610088565b80630121b93f1461008d578063013cf08b146100a95780632e4176cf146100da5780635c19a95c146100f8575b600080fd5b6100a760048036038101906100a291906109f4565b61019f565b005b6100c360048036038101906100be91906109f4565b6102e5565b6040516100d1929190610a49565b60405180910390f35b6100e2610319565b6040516100ef9190610ab3565b60405180910390f35b610112600480360381019061010d9190610afa565b61033d565b005b61011c6106e9565b6040516101299190610b27565b60405180910390f35b61014c60048036038101906101479190610afa565b610771565b005b61016860048036038101906101639190610afa565b610928565b6040516101789493929190610b5d565b60405180910390f35b610189610985565b6040516101969190610ba2565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610c1a565b60405180910390fd5b8060010160009054906101000a900460ff161561027b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027290610c86565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508181600201819055508060000154600283815481106102ba576102b9610ca6565b5b906000526020600020906002020160010160008282546102da9190610d04565b925050819055505050565b600281815481106102f557600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990610da6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043790610e12565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105af57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a190610e7e565b60405180910390fd5b610441565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561060457600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff16156106c4578160000154600282600201548154811061069857610697610ca6565b5b906000526020600020906002020160010160008282546106b89190610d04565b925050819055506106e4565b81600001548160000160008282546106dc9190610d04565b925050819055505b505050565b6000806000905060005b60028054905081101561076c57816002828154811061071557610714610ca6565b5b9060005260206000209060020201600101541115610759576002818154811061074157610740610ca6565b5b90600052602060002090600202016001015491508092505b808061076490610e9e565b9150506106f3565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690610f58565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff161561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690610fc4565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146108de57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b600060026109916106e9565b815481106109a2576109a1610ca6565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b6109d1816109be565b81146109dc57600080fd5b50565b6000813590506109ee816109c8565b92915050565b600060208284031215610a0a57610a096109b9565b5b6000610a18848285016109df565b91505092915050565b6000819050919050565b610a3481610a21565b82525050565b610a43816109be565b82525050565b6000604082019050610a5e6000830185610a2b565b610a6b6020830184610a3a565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9d82610a72565b9050919050565b610aad81610a92565b82525050565b6000602082019050610ac86000830184610aa4565b92915050565b610ad781610a92565b8114610ae257600080fd5b50565b600081359050610af481610ace565b92915050565b600060208284031215610b1057610b0f6109b9565b5b6000610b1e84828501610ae5565b91505092915050565b6000602082019050610b3c6000830184610a3a565b92915050565b60008115159050919050565b610b5781610b42565b82525050565b6000608082019050610b726000830187610a3a565b610b7f6020830186610b4e565b610b8c6040830185610aa4565b610b996060830184610a3a565b95945050505050565b6000602082019050610bb76000830184610a2b565b92915050565b600082825260208201905092915050565b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b6000610c04601483610bbd565b9150610c0f82610bce565b602082019050919050565b60006020820190508181036000830152610c3381610bf7565b9050919050565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b6000610c70600e83610bbd565b9150610c7b82610c3a565b602082019050919050565b60006020820190508181036000830152610c9f81610c63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0f826109be565b9150610d1a836109be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4f57610d4e610cd5565b5b828201905092915050565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b6000610d90601283610bbd565b9150610d9b82610d5a565b602082019050919050565b60006020820190508181036000830152610dbf81610d83565b9050919050565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b6000610dfc601e83610bbd565b9150610e0782610dc6565b602082019050919050565b60006020820190508181036000830152610e2b81610def565b9050919050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610e68601983610bbd565b9150610e7382610e32565b602082019050919050565b60006020820190508181036000830152610e9781610e5b565b9050919050565b6000610ea9826109be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610edb57610eda610cd5565b5b600182019050919050565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b6000610f42602883610bbd565b9150610f4d82610ee6565b604082019050919050565b60006020820190508181036000830152610f7181610f35565b9050919050565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b6000610fae601883610bbd565b9150610fb982610f78565b602082019050919050565b60006020820190508181036000830152610fdd81610fa1565b905091905056fea2646970667358221220d010016fa6278aff0a8e3393f22f78add8f33a03373280bb2a7a685574eed94764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "winningProposal()": {
        "details": "Computes the winning proposal taking all previous votes into account."
      }
    },
    "title": "Voting with delegation.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new ballot to choose one of `proposalNames`."
      },
      "delegate(address)": {
        "notice": "Delegate your vote to the voter `to`."
      },
      "vote(uint256)": {
        "notice": "Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "chairperson",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "voters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Voter)11_storage)"
      },
      {
        "astId": 27,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Proposal)16_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)16_storage)dyn_storage": {
        "base": "t_struct(Proposal)16_storage",
        "encoding": "dynamic_array",
        "label": "struct Ballot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Voter)11_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ballot.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)11_storage"
      },
      "t_struct(Proposal)16_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Proposal",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)11_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Voter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "weight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "delegate",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}